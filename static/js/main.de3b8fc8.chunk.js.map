{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","stepInput","canvasHeight","canvasWidth","pallete","renderCanvas","p1","x","y","p2","cRect","ctx","current","getContext","clearRect","recursiveDraw","state","depth","r","g","b","depthChange","event","nextValue","target","valueAsNumber","setState","drawManHandler","drawMandelbrot","squareComplex","cNumber","i","sumComplex","c1","c2","mandelbrotIteration","c","nIt","cIt","length","index","Math","floor","width","height","test","createImageData","console","log","data","a","putImageData","rect","xWidth","yHeight","x1","y1","fillStyle","concat","fillRect","nRect","randomPallete","push","random","React","createRef","react_default","createElement","className","ref","type","name","value","onChange","id","toString","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de3b8fc8.chunk.js","sourcesContent":["import React, { Component, ChangeEvent } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { type } from 'os';\nimport { types } from 'util';\n\ninterface Rectangle{\n  p1:Point;\n  p2:Point\n}\ninterface State{\n  \n  depth:number;\n  [\"key\"]?:any;\n}\ninterface Point{\n  x: number;\n  y:number;\n} \ninterface Complex{\n  r:number;\n  i:number;\n}\ninterface Color{\n  r : number;\n  g : number;\n  b : number;\n\n}\ninterface Props{\n  test?:string\n}\nclass App extends Component<Props,State> {\n  private stepInput : React.RefObject<HTMLCanvasElement>\n  private canvasHeight : number;\n  private canvasWidth : number;\n  private pallete :number[][] = [[38, 70, 83],\n    [42, 157, 143],\n    [233, 196, 106],\n    [244, 162, 97],\n    [231, 111, 81]]\n  constructor(props:Props) {\n    super(props);\n    this.state = {depth:1}\n    this.stepInput = React.createRef();\n    this.canvasHeight = 640;\n    this.canvasWidth = 1366;\n    this.pallete = []\n    for (let i = 0; i<0;i++){\n      this.pallete.push([Math.floor(Math.random()*255),Math.floor(Math.random()*255),Math.floor(Math.random()*255)])\n\n    }\n}\n\n  renderCanvas = () => {\n\n    var p1:Point = {x:0,y:0}\n    var p2:Point = {x:640,y:640}\n    var cRect:Rectangle = {p1,p2}\n    var canvas :any =  this.stepInput.current\n    var ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n    \n    \n    ctx.clearRect(p1.x,p1.y, p2.x,p2.y)\n    this.recursiveDraw(this.state.depth, cRect, {r:0,g:0,b:0} ,ctx)\n\n\n  }\n\n  depthChange = (event:ChangeEvent<HTMLInputElement>) =>{\n    let nextValue =  event.target.valueAsNumber;\n    this.setState({depth:nextValue})\n\n  }\n\n  drawManHandler= () =>{\n    var canvas :any =  this.stepInput.current\n    var ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n    var p1:Point = {x:0,y:0}\n    var p2:Point = {x:640,y:640}\n    var cRect:Rectangle = {p1,p2}\n    ctx.clearRect(p1.x,p1.y, p2.x,p2.y)\n    this.drawMandelbrot(ctx);\n\n\n  }\n\n  squareComplex=(cNumber:Complex):Complex=>{\n    return {r: (cNumber.r*cNumber.r - cNumber.i*cNumber.i), i:2*cNumber.r*cNumber.i }\n  \n  }\n  sumComplex=(c1:Complex,c2:Complex):Complex =>{\n    return {r:(c1.r+c2.r), i:(c1.i+c2.i)}\n\n  }\n\n  mandelbrotIteration=(c:Complex,nIt:number):Color=>{\n    let cIt:Complex = {r:0,i:0}\n    for (let i= 0; i<nIt;i++){\n      cIt = this.sumComplex (this.squareComplex(cIt),c)\n      if((cIt.r*cIt.r + cIt.i*cIt.i) >= 4 ){\n        if(this.pallete.length == 0)\n        {return {r:i/nIt *255,g:(i/nIt) *(i/nIt) * 255,b:(1 - i/nIt) *255}}\n        else\n        {\n          let index = Math.floor(i/nIt * (this.pallete.length - 1))\n          return {r:this.pallete[index][0],g:this.pallete[index][1],b:this.pallete[index][2]}\n\n        }\n      }\n    }\n    return {r:0,g:0,b:0}\n  }\n\n  drawMandelbrot = (ctx:CanvasRenderingContext2D) => {\n    let width = this.canvasWidth;\n    let height = this.canvasHeight;\n    let test = ctx.createImageData(width,height);\n    ctx.clearRect(0,0,width,height)\n    console.log(width,height)\n    \n    for (let i = 0; i < test.data.length;i+=4){\n      let x = ((i % (width * 4 )) - (width * 2)) / (width/4)\n      let y = (i / (width * 4) - (height /2 )) / (height/4)\n      let a =this.mandelbrotIteration({r:x,i:y},this.state.depth) \n      \n        test.data[i] = a['r'];\n        test.data[i+1] = a['g'];\n        test.data[i+2] = a['b'];\n        test.data[i+3] = 255;\n      \n     \n\n    }\n\n    ctx.putImageData(test, 0,0);\n\n  \n  }\n\n  recursiveDraw =(depth: number, rect:Rectangle, c:Color, ctx:CanvasRenderingContext2D )=>{\n    if(depth<0)\n    {return;}\n    \n    let xWidth : number = (rect.p2.x - rect.p1.x)/3;\n    let yHeight : number = (rect.p2.y - rect.p1.y)/3;\n    let x1 : number = rect.p1.x + xWidth;\n    let y1 : number = rect.p1.y + yHeight;\n    let index = Math.floor(depth/this.state.depth * (this.pallete.length - 1));\n    ctx.fillStyle = `rgb(${this.pallete[index][0]},${this.pallete[index][1]},${this.pallete[index][2]})`\n    ctx.fillRect(x1,y1,xWidth,yHeight)\n\n  for (let x : number = 0; x < 3; x++){\n    for(let y : number =0; y<3; y++){\n      var p1: Point = {x:rect.p1.x + (xWidth) * x, y: rect.p1.y + (yHeight)*y }\n      var p2 : Point = {x:rect.p1.x + (xWidth) * (x+1), y: rect.p1.y + (yHeight)* (y+1) }\n      var nRect = {p1:p1,p2:p2}\n      if(x == 1 && y == 1){ continue;}  \n      this.recursiveDraw(depth - 1,nRect, c, ctx )\n\n    }\n  }\n\n  }\n  randomPallete = () => {\n    this.pallete = []\n    for (let i = 0; i<64;i++){\n      this.pallete.push([Math.floor(Math.random()*255),Math.floor(Math.random()*255),Math.floor(Math.random()*255)])\n    }\n  }\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <canvas ref={this.stepInput} height={this.canvasHeight} width={this.canvasWidth} /> \n        <input type=\"number\" name=\"fract_depth\" value = {this.state.depth} onChange={this.depthChange} id={Math.random().toString()}/>\n        <button onClick={this.renderCanvas} > Render </button>\n        <button onClick={this.drawManHandler} > Render Mandelbrot </button>\n        <button onClick={this.randomPallete} > Random pallete </button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}